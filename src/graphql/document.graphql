fragment Todo on Todo {
  id
  title
  done
  starred
  priority
  note
  tags
  dueDate
}

fragment Subtask on Subtask {
  id
  title
  done
  starred
  priority
  note
  tags
  dueDate
}

# TODO: should not just be first: 100
# but should return **all** the todos
# also all the subtasks for the todos
# pagination?
query Todos {
  todoCollection(first: 100) {
    edges {
      node {
        ...Todo
        subtasks(first: 20) {
          edges {
            node {
              ...Subtask
            }
          }
        }
      }
    }
  }
}

mutation TodoCreate($todo: TodoCreateInput!) {
  todoCreate(input: $todo) {
    todo {
      id
    }
  }
}

mutation TodoUpdate($id: ID!, $todo: TodoUpdateInput!) {
  todoUpdate(by: { id: $id }, input: $todo) {
    todo {
      id
    }
  }
}

mutation TodoDelete($id: ID!) {
  todoDelete(by: { id: $id }) {
    deletedId
  }
}

# TODO: this should be part of `SubtaskCreate`...
# super annoying having to link it manually every time
mutation SubtaskLink($taskId: ID!, $subtaskId: ID!) {
  todoUpdate(by: { id: $taskId }, input: { subtasks: [{ link: $subtaskId }] }) {
    todo {
      id
    }
  }
}

# same as Todos query, should return all the subtasks..
query Subtasks {
  subtaskCollection(first: 100) {
    edges {
      node {
        id
        title
      }
    }
  }
}

mutation SubtaskCreate($subtask: SubtaskCreateInput!) {
  subtaskCreate(input: $subtask) {
    subtask {
      id
    }
  }
}

mutation SubtaskUpdate($id: ID!, $subtask: SubtaskUpdateInput!) {
  subtaskUpdate(by: { id: $id }, input: $subtask) {
    subtask {
      id
    }
  }
}

mutation SubtaskDelete($id: ID!) {
  subtaskDelete(by: { id: $id }) {
    deletedId
  }
}

query UserDetails {
  userDetailsCollection(first: 1) {
    edges {
      node {
        id
        freeAiTasksAvailable
        paidSubscriptionValidUntilDate
        languageModelUsed
        collapsedSidebar
      }
    }
  }
}

mutation UserDetailsCreate($userDetails: UserDetailsCreateInput!) {
  userDetailsCreate(input: $userDetails) {
    userDetails {
      id
    }
  }
}

mutation UserDetailsUpdate($id: ID!, $userDetails: UserDetailsUpdateInput!) {
  userDetailsUpdate(by: { id: $id }, input: $userDetails) {
    userDetails {
      id
    }
  }
}

query SuggestedTasks($task: String!) {
  suggestions(task: $task) {
    suggestedTasks {
      intro
      tasks {
        task
        note
      }
    }
    rawResponse
    needPayment
  }
}

query Stripe($plan: String!) {
  stripe(plan: $plan) {
    stripeCheckoutUrl
  }
}
