schema
  @auth(
    providers: [{ type: jwks, jwksEndpoint: "{{ env.HANKO_API_ENDPOINT }}" }]
    rules: [{ allow: owner }]
  ) {
  query: Query
}

extend type Query {
  suggestions(task: String!): SuggestionsPayload @resolver(name: "suggestions")
  stripe(plan: String!): StripePayload @resolver(name: "stripe")
}

type StripePayload {
  stripeCheckoutUrl: String!
}

type SuggestionsPayload {
  suggestedTasks: SuggestedTasks
  rawResponse: String
  needPayment: Boolean
}

type SuggestedTasks {
  intro: String
  tasks: [SuggestedTask]!
}

type SuggestedTask {
  task: String!
  note: String
}

type UserDetails @model {
  freeAiTasksAvailable: Int @default(value: 10) # times user can use gpt-3 AI suggestions for free
  paidSubscriptionValidUntilDate: Date
  languageModelUsed: String! @default(value: "gpt-3") # gpt-3 | gpt-4
  collapsedSidebar: Boolean! @default(value: false)
  # username: String # set by a user, this will be a route to show public todos TODO: if unique, it can't be null, solve this :(
}

type Todo @model {
  title: String!
  done: Boolean! @default(value: false)
  starred: Boolean! @default(value: false)
  priority: Int! @default(value: 0)
  note: String
  dueDate: String
  subtasks: [Subtask]
  tags: [String]
  cached: String # 'gpt-3' | 'gpt-4'
}

type Subtask @model {
  title: String!
  done: Boolean! @default(value: false)
  starred: Boolean! @default(value: false)
  priority: Int! @default(value: 0)
  note: String
  dueDate: String
  tags: [String]
  cached: String # 'gpt-3' | 'gpt-4'
}
